#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#

remote="$1"
url="$2"

# Test python code with pytest before push.

# Define protected branch and find current branch.
protected='master'
current=$(git symbolic-ref HEAD | awk -F'/' '{print $3}')

# Check if there are actually commits to push.
commits=`git log @{u}..`
if [ -z "$commits" ]; then
    exit 0
fi

# Find whether the current branch is up to date.
branch_status=$(git fetch -v --dry-run 2>&1 |\
		    awk -v cur=$current '$5==cur {print $2 $3 $4}')

# Exit if we need to pull.
if [ $branch_status != "[uptodate]" ]; then
    echo 'Please pull and merge new commits from remote.'
    exit 1
fi

# Run the tests.
if [ $current = $protected ]; then
    python -m pytest
    RESULT=$?
    if [ $RESULT -ne 0 ]; then
	echo "Failed tests."
	exit 1
    fi
fi
exit 0
