#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#

remote="$1"
url="$2"

# Test python code with pytest before push.

# Define protected branch and find current branch.
protected='master'
current=$(git symbolic-ref HEAD | awk -F'/' '{print $3}')

# Check if there are actually commits to push.
commits=`git log @{u}..`
if [ -z "$commits" ]; then
    exit 0
fi

# Find whether the current branch is up to date.
branch_status=$(git fetch -v --dry-run 2>&1 | grep $current | awk '{print $1}')

# Exit if we need to pull.
if [ $branch_status != "=" ]; then
    echo 'Please pull and merge before pushing.'
    exit 1
fi

# Check for pdbs.

# Get list of commits with import pdb added.
pdbdiffs=$(git diff origin/master..HEAD -- '*.py' | grep + | grep 'import pdb')

# If pdbdiffs is not empty, exit.
if [ ! -z "$pdbdiffs" ]; then
    echo "Your commits have import pdbs. Please remove them."
    exit 1
fi

# Find modified python files.
pyfiles=$(git diff origin/master..HEAD --name-only -- '*.py')

# Check to see how the pylint score changed, rejecting bad ones.
for f in $pyfiles
do
    # Check if the file is new.
    isnew=$(grep $f scorelints.txt)

    # Find the new score
    newscore=$(pylint $f | grep 'Your code has been rated at' |\
		      awk -F'at ' '{print $2}' | awk -F'/' '{print $1}')

    # If new, run pytest and only allow a push if the score > 5.
    if [ -z "$isnew" ]; then
	goodstart=$(echo "$newscore>5" | bc)
	if [ "$goodstart" -ne "1" ]; then
	    echo "$f has a pylint score below 5. Please improve it and try again."
	    exit 1
	fi
    # If not new, check the old score and only push if score is same or better.
    else
	# Find the old score.
	oldscore=$(grep $f scorelints.txt | awk '{print $2}')

	# Check if the score is not good enough.
	okayscore=$(echo "$oldscore-$newscore>=0" | bc)
	if [ "$okayscore" -ne "1" ]; then
	    echo "You've decreased the pylint score for $f. Please improve it and try again."
	    exit 1
	fi
    fi
done

# # Run the tests.
# if [ $current = $protected ]; then
#     python -m pytest
#     RESULT=$?
#     if [ $RESULT -ne 0 ]; then
# 	echo "Failed pytests."
# 	exit 1
#     fi
# fi
exit 0
